#!/usr/bin/env python3

from ninja_syntax import Writer
from pathlib import Path

class Converter(object):

    @classmethod
    def from_arg(kls, arg):
        input_ext, rest = arg.split(",", 1)
        output_ext, cmd = rest.split(",", 1)
        name = "{0}_to_{1}".format(input_ext, output_ext)
        return kls(name, input_ext, output_ext, cmd)

    def __init__(self, name, in_ext, out_ext, cmd):
        self.name = name
        self.in_ext = in_ext
        self.out_ext = out_ext
        self.cmd = cmd

    def does_convert(self, path):
        ext = path.suffix[1:]
        return ext == self.in_ext

    def ninja_rule(self, writer):
        writer.rule(self.name, self.cmd)

    # copy_output_path: The path that would be in the output 
    #                   if the file was just copied
    def ninja_build(self, writer, in_path, copy_output_path):
        output = copy_output_path.with_suffix("." + self.out_ext)
        writer.build([str(output)], self.name, inputs=[str(in_path)])

# Recursive iterate through all files below "root"
def recursive_file_iter(root):
    if not root.is_dir():
        yield root
        return
    for path in root.iterdir():
        for sub_path in recursive_file_iter(path):
            yield sub_path

# The the equivalent path to "path" rooted at "new_root"
def reroot_path(path, root, new_root):
    rel = path.relative_to(root)
    return new_root.joinpath(rel)

class NoConverterError(Exception): ""

def get_converter(converters, path):
    for converter in converters:
        if converter.does_convert(path):
            return converter
    raise NoConverterError()
    
if __name__ == "__main__":
    from argparse import ArgumentParser
    parser = ArgumentParser()
    parser.add_argument("-c", "--converter", action="append")
    parser.add_argument("-f", "--build-file-name", default="build.ninja")
    parser.add_argument("source_dir", type=Path)
    parser.add_argument("dest_dir", type=Path)

    args = parser.parse_args()

    converters = []
    if args.converter:
        for i in args.converter:
            converters.append(Converter.from_arg(i))

    source_dir = args.source_dir.resolve()
    dest_dir = args.dest_dir.resolve()

    writer = Writer(open(args.build_file_name, "w"))

    writer.rule("copy", "install -m0644 -D $in $out")

    for converter in converters:
        converter.ninja_rule(writer)

    for file_path in recursive_file_iter(source_dir):
        out_path = reroot_path(file_path, source_dir, dest_dir)
        try:
            converter = get_converter(converters, file_path)
            converter.ninja_build(writer, file_path, out_path)
        except NoConverterError:
            writer.build([str(out_path)], "copy", inputs=[str(file_path)])

    writer.close()

